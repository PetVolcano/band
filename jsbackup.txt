















// JavaScript Document

window.addEventListener('load', () => {
	initializeFlameHoverEffects();
	initializeCarousel();
	initializeIframeCarousel();
    // Function to load content into dynamic-content div
    function loadContent(url, targetId, scroll = true) {
        const target = document.getElementById(targetId); // Target div where content will be inserted
        target.innerHTML = ''; // Clear existing content

        fetch(url)
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then((html) => {
                target.innerHTML = html; // Replace the content in the target div

                // Smooth scroll to bring the content into view
                if (scroll) {
                    target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }

                // After content loads, re-attach any dynamic event listeners
                initializeScript();
            })
            .catch((error) => {
                console.error(`Error fetching ${url}:`, error);
                target.innerHTML = '<p>Failed to load content. Please try again later.</p>';
            });
    }

    // Call initializeScript() after page load to set up hover effects for initial elements
    initializeScript();

    // Smooth scroll for the Home link in the navbar
    document.querySelector('a[href="#home"]').addEventListener('click', function (e) {
        e.preventDefault(); // Prevent default anchor behavior

        // Reload the home.html content
        loadContent('home.html', 'dynamic-content', false);

        // Smooth scroll back to the top
        setTimeout(() => {
            const target = document.querySelector('#home');
            if (target) {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }, 100); // Slight delay to ensure smooth scrolling works
    });

    // Smooth scroll for the static "scroll-to-hiding" button
    document.getElementById('scroll-to-hiding').addEventListener('click', function (e) {
        e.preventDefault(); // Prevent default behavior

        // Smooth scroll to #zombride
        const target = document.querySelector('#zombride');
        if (target) {
            setTimeout(() => {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 1000); // 1-second delay
        }
    });

    // Add event delegation for "scroll-to-hiding2" in dynamically loaded content
    document.getElementById('dynamic-content').addEventListener('click', function (e) {
        const clickedElement = e.target;

        // Check if the clicked element is the button or its child (e.g., the img inside the button)
        if (clickedElement.id === 'scroll-to-hiding2' || clickedElement.closest('#scroll-to-hiding2')) {
            e.preventDefault(); // Prevent default behavior

            // Smooth scroll to #zombride
            const target = document.querySelector('#zombride');
            if (target) {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }
    });

    // Generalized navbar link handling for dynamically loaded content
    document.querySelectorAll('.navbar a').forEach((navLink) => {
        const targetId = navLink.getAttribute('href').substring(1); // Extract target ID
        if (targetId && targetId !== 'home') {
            navLink.addEventListener('click', function (e) {
                e.preventDefault(); // Prevent default behavior
                loadContent(`${targetId}.html`, 'dynamic-content'); // Load the corresponding content
            });
        }
    });

	// Flame layer hover effect
function initializeFlameHoverEffects() {
    const buttons = document.querySelectorAll('.button button');
    const layer3Image = document.getElementById('layer3');

    if (layer3Image) {
        buttons.forEach((button) => {
            button.removeEventListener('mouseenter', handleMouseEnter);
            button.removeEventListener('mouseleave', handleMouseLeave);

            function handleMouseEnter() {
                layer3Image.src = 'flamelayer.png';
            }

            function handleMouseLeave() {
                layer3Image.src = 'image3.gif';
            }

            button.addEventListener('mouseenter', handleMouseEnter);
            button.addEventListener('mouseleave', handleMouseLeave);
        });
    }
}
	
    // Load the home.html content initially when the page loads
    loadContent('home.html', 'dynamic-content', false);
    
	
	// Reinitialize hover effect for the newly loaded content
    initializeScript();
	
    // Initialize the carousel
    function initializeCarousel() {
        const carouselSlide = document.querySelector('.carousel-slide');
        const carouselImages = document.querySelectorAll('.carousel-slide img');

        if (!carouselSlide || !carouselImages.length) return; // Check if elements exist

        const prevBtn = document.querySelector('#prevBtn');
        const nextBtn = document.querySelector('#nextBtn');

        let counter = 1;
        const size = carouselImages[0].clientWidth;

        carouselSlide.style.transform = 'translateX(' + -size * counter + 'px)';

        nextBtn?.addEventListener('click', () => {
            carouselSlide.style.transition = 'transform 0.4s ease-in-out';
            counter++;
            if (counter >= carouselImages.length - 1) counter = 0;
            carouselSlide.style.transform = 'translateX(' + -size * counter + 'px)';
        });

        prevBtn?.addEventListener('click', () => {
            carouselSlide.style.transition = 'transform 0.4s ease-in-out';
            counter--;
            if (counter < 0) counter = carouselImages.length - 2;
            carouselSlide.style.transform = 'translateX(' + -size * counter + 'px)';
        });
    }

    // Update loadContent to include carousel initialization
    function loadContent(url, targetId, scroll = true) {
        const target = document.getElementById(targetId); // Target div where content will be inserted
        target.innerHTML = ''; // Clear existing content

        fetch(url)
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then((html) => {
                target.innerHTML = html; // Replace the content in the target div

                // Smooth scroll to bring the content into view
                if (scroll) {
                    target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }

                // Reinitialize carousel after dynamic content is loaded
                initializeCarousel();
            })
            .catch((error) => {
                console.error(`Error fetching ${url}:`, error);
                target.innerHTML = '<p>Failed to load content. Please try again later.</p>';
            });
    }

    // Initialize the carousel
    initializeCarousel();

function initializeIframeCarousel() {
    const carouselSlide = document.querySelector('.carousel-slide-tv');
    const carouselItems = document.querySelectorAll('.carousel-slide-tv iframe');

    const prevBtn = document.querySelector('#prevBtn2');
    const nextBtn = document.querySelector('#nextBtn2');

    if (carouselSlide && carouselItems.length > 0 && prevBtn && nextBtn) {
        let counter = 1; // Start at the first visible item
        const size = carouselItems[0].clientWidth;

        // Initialize position
        carouselSlide.style.transform = `translateX(${-size * counter}px)`;

        // Helper function to update autoplay status
        const updateAutoplay = () => {
            carouselItems.forEach((iframe, index) => {
                const src = iframe.src.replace('&autoplay=1', ''); // Remove autoplay if present
                if (index === counter) {
                    iframe.src = src + '&autoplay=1'; // Add autoplay for the visible video
                } else {
                    iframe.src = src; // Ensure autoplay is removed for non-visible videos
                }
            });
        };

        // Set autoplay for the initial video
        updateAutoplay();

        // Next button
        nextBtn.addEventListener('click', () => {
            if (counter >= carouselItems.length - 1) return; // Prevent going out of bounds
            carouselSlide.style.transition = "transform 0.4s ease-in-out";
            counter++;
            carouselSlide.style.transform = `translateX(${-size * counter}px)`;
            updateAutoplay();
        });

        // Previous button
        prevBtn.addEventListener('click', () => {
            if (counter <= 0) return; // Prevent going out of bounds
            carouselSlide.style.transition = "transform 0.4s ease-in-out";
            counter--;
            carouselSlide.style.transform = `translateX(${-size * counter}px)`;
            updateAutoplay();
        });

        // Infinite loop handling
        carouselSlide.addEventListener('transitionend', () => {
            if (carouselItems[counter].id === 'firstclone2') {
                carouselSlide.style.transition = "none";
                counter = 1;
                carouselSlide.style.transform = `translateX(${-size * counter}px)`;
            }

            if (carouselItems[counter].id === 'lastclone2') {
                carouselSlide.style.transition = "none";
                counter = carouselItems.length - 2;
                carouselSlide.style.transform = `translateX(${-size * counter}px)`;
            }
            updateAutoplay();
        });
    } else {
        console.error('Iframe carousel elements not found in DOM.');
    }
}

function loadContent(url, targetId, scroll = true) {
    const target = document.getElementById(targetId); // Target div where content will be inserted
    target.innerHTML = ''; // Clear existing content

    fetch(url)
        .then((response) => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then((html) => {
            target.innerHTML = html; // Replace the content in the target div

            // Smooth scroll to bring the content into view
            if (scroll) {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }

            // Reinitialize scripts for dynamic content
            initializeScript();
            initializeCarousel(); // Standard carousel
            initializeIframeCarousel(); // Iframe video carousel
        })
        .catch((error) => {
            console.error(`Error fetching ${url}:`, error);
            target.innerHTML = '<p>Failed to load content. Please try again later.</p>';
        });
}

// JavaScript for handling click effects
function initializeScript() {
    const images = document.querySelectorAll('.logo');

    images.forEach((image) => {
        let isScaled = false; // Track whether the image is scaled or not

        // Click effect: Scale the image on first click and revert on second click
        image.addEventListener('click', () => {
            if (isScaled) {
                image.style.transform = 'scale(1)'; // Scale back to original on second click
                isScaled = false;
            } else {
                image.style.transform = 'scale(2)'; // Scale up on first click
                isScaled = true;
            }
        });
    });

    // Add hover effect to maintain interaction even when not clickable
    images.forEach((image) => {
        image.addEventListener('mouseenter', () => {
            if (!isScaled) {
                image.style.transform = 'scale(2)'; // Enlarge on hover if not already scaled by click
            }
        });

        image.addEventListener('mouseleave', () => {
            if (!isScaled) {
                image.style.transform = 'scale(1)'; // Reset scale on mouse leave
            }
        });
    });
}

// Call initializeScript when the page loads
window.addEventListener('load', () => {
    initializeScript();
});

// Re-initialize the script for dynamically loaded content
window.addEventListener('DOMContentLoaded', () => {
    initializeScript();
});



});
	
